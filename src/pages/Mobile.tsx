import { useEffect, useRef, useState } from "react";
import { createWorker, type Worker, PSM } from "tesseract.js";
import type { LoggerMessage } from "tesseract.js";

// Define interfaces for better type safety
interface ROIRect {
  x: number;
  y: number;
  w: number;
  h: number;
}

interface RoiOverlayProps {
  getROI: () => ROIRect | null;
}

export default function DigitScanner() {
  // Fix ref types
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  const [streaming, setStreaming] = useState(false);
  const [ready, setReady] = useState(false);
  const [result, setResult] = useState("");

  // Fix state type for conf
  const [conf, setConf] = useState<number | null>(null);
  const [error, setError] = useState("");
  const [scanning, setScanning] = useState(false);

  // Fix Worker ref type
  const workerRef = useRef<Worker | null>(null);
  const ocrBusyRef = useRef(false);
  const intervalRef = useRef<number | null>(null);

  const [modalOpen, setModalOpen] = useState(false);
  const [modalMessage, setModalMessage] = useState("");
  const [modalType, setModalType] = useState<"success" | "error">("success");

  const sendToGoogleSheet = async () => {
    if (!result) {
      setModalMessage("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á");
      setModalType("error");
      setModalOpen(true);
      return;
    }

    try {
      // üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á Sheety ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤
      const sheetyUrl =
        "https://api.sheety.co/3c71bb24fa11671f4674ec67c9e1895c/webcam/cam1";

      // üîπ ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Sheety ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà object ‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πâ‡∏° field
      const body = {
        result: {
          value: result,
        },
      };

      const response = await fetch(sheetyUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      });

      if (!response.ok) {
        throw new Error(`POST failed: ${response.status}`);
      }

      setModalMessage(`‚úì ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result}`);
      setModalType("success");
      setModalOpen(true);
    } catch (err) {
      console.error("Sheety error:", err);
      setModalMessage(`‚úó ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${String(err)}`);
      setModalType("error");
      setModalOpen(true);
    }
  };

  // Initialize Tesseract worker
  useEffect(() => {
    let cancelled = false;
    (async () => {
      try {
        const worker = await createWorker("eng", undefined, {
          logger: (m: LoggerMessage) => console.log(m),
        });
        await worker.setParameters({
          tessedit_char_whitelist: "0123456789",
          tessedit_pageseg_mode: PSM.SINGLE_LINE,
        });
        if (!cancelled) {
          workerRef.current = worker;
          setReady(true);
        } else {
          await worker.terminate();
        }
      } catch (e) {
        console.error(e);
        setError("‡πÇ‡∏´‡∏•‡∏î OCR ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Tesseract.js)");
      }
    })();
    return () => {
      cancelled = true;
    };
  }, []);

  // Start/stop camera
  const handleToggleCamera = async () => {
    if (streaming) {
      stopCamera();
      return;
    }
    try {
      const constraints = {
        audio: false,
        video: {
          facingMode: { ideal: "environment" },
          width: { ideal: 1280 },
          height: { ideal: 720 },
        },
      };
      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      if (!videoRef.current) return;
      videoRef.current.srcObject = stream;
      await videoRef.current.play();
      setStreaming(true);
    } catch (e) {
      console.error(e);
      setError(
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‚Äì ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ HTTPS ‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏•‡πâ‡∏≠‡∏á"
      );
    }
  };

  const stopCamera = () => {
    setScanning(false);
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
    if (videoRef.current && videoRef.current.srcObject) {
      const tracks =
        (videoRef.current.srcObject as MediaStream).getTracks() || [];
      tracks.forEach((t: MediaStreamTrack) => t.stop());
      videoRef.current.srcObject = null;
    }
    setStreaming(false);
  };

  useEffect(() => {
    return () => {
      stopCamera();
      if (workerRef.current) {
        workerRef.current.terminate();
        workerRef.current = null;
      }
    };
  }, []);

  // Compute ROI rect relative to video
  const getROI = (): ROIRect | null => {
    const video = videoRef.current;
    if (!video) return null;
    const vw = video.videoWidth;
    const vh = video.videoHeight;
    if (!vw || !vh) return null;
    const roiW = Math.floor(vw * 0.5);
    const roiH = Math.floor(vh * 0.15);
    const x = Math.floor((vw - roiW) / 2);
    const y = Math.floor((vh - roiH) / 2);
    return { x, y, w: roiW, h: roiH };
  };

  const singleOcrPass = async () => {
    if (ocrBusyRef.current) return;
    const video = videoRef.current;
    const canvas = canvasRef.current;
    const worker = workerRef.current;
    if (!video || !canvas || !worker) return;
    const roi = getROI();
    if (!roi) return;

    canvas.width = Math.min(roi.w, 640);
    canvas.height = (roi.h * canvas.width) / roi.w;
    const ctx = canvas.getContext("2d");
    if (!ctx) return;
    ctx.drawImage(
      video,
      roi.x,
      roi.y,
      roi.w,
      roi.h,
      0,
      0,
      canvas.width,
      canvas.height
    );
    const imgData = ctx.getImageData(0, 0, roi.w, roi.h);
    const data = imgData.data;
    for (let i = 0; i < data.length; i += 4) {
      const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
      const v = avg > 160 ? 255 : 0;
      data[i] = data[i + 1] = data[i + 2] = v;
    }
    ctx.putImageData(imgData, 0, 0);

    try {
      ocrBusyRef.current = true;
      const { data } = await worker.recognize(canvas);
      const text = (data?.text ?? "").trim();
      const digits = text
        .replace(/[^0-9]/g, "")
        .slice(0, 32)
        .replace(/[^0-9OIl]/g, "")
        .replace(/[O]/g, "0")
        .replace(/[Il]/g, "1");
      if (digits) {
        setResult(digits);
        setConf(Math.round((data?.confidence ?? 0) * 10) / 10);
      }
    } catch (e) {
      console.error(e);
    } finally {
      ocrBusyRef.current = false;
    }
  };

  const handleToggleScan = () => {
    if (!streaming || !ready) return;
    setScanning((s) => {
      const next = !s;
      if (next) {
        intervalRef.current = window.setInterval(() => {
          singleOcrPass();
        }, 500);
      } else {
        if (intervalRef.current) {
          clearInterval(intervalRef.current);
          intervalRef.current = null;
        }
      }
      return next;
    });
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(result || "");
      setModalMessage("‚úì ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß");
      setModalType("success");
      setModalOpen(true);
    } catch {
      setModalMessage("‚úó ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setModalType("error");
      setModalOpen(true);
    }
  };

  return (
    <div className="min-h-screen bg-slate-50 text-slate-800 p-4 md:p-8">
      <div className="max-w-3xl mx-auto grid gap-4">
        <h1 className="text-2xl md:text-3xl font-bold">
          ‡∏™‡πÅ‡∏Å‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á (OCR)
        </h1>
        <p className="text-sm opacity-80">
          ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå ‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏ú‡πà‡∏≤‡∏ô HTTPS ‚Ä¢
          ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        </p>

        {error && (
          <div className="p-3 rounded-2xl bg-red-100 text-red-700 border border-red-200">
            {error}
          </div>
        )}

        <div className="relative rounded-2xl overflow-hidden shadow-md bg-black">
          <video
            ref={videoRef}
            className="w-full h-auto block"
            playsInline
            muted
            autoPlay
          />
          <RoiOverlay getROI={getROI} />
        </div>

        <div className="flex flex-wrap items-center gap-2">
          <button
            onClick={handleToggleCamera}
            className={`px-4 py-2 rounded-2xl shadow ${
              streaming ? "bg-slate-200" : "bg-slate-900 text-white"
            }`}
          >
            {streaming ? "‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á" : "‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á"}
          </button>

          <button
            disabled={!streaming || !ready}
            onClick={handleToggleScan}
            className={`px-4 py-2 rounded-2xl shadow ${
              scanning
                ? "bg-amber-100 text-amber-900"
                : "bg-emerald-600 text-white"
            } disabled:opacity-50`}
          >
            {scanning ? "‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πÅ‡∏Å‡∏ô" : "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô"}
          </button>

          <button
            onClick={copyToClipboard}
            disabled={!result}
            className="px-3 py-2 rounded-2xl shadow bg-slate-100 disabled:opacity-50"
          >
            ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
          </button>

          <button
            onClick={sendToGoogleSheet}
            disabled={!result}
            className="px-3 py-2 rounded-2xl shadow bg-blue-500 text-white disabled:opacity-50"
          >
            ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
          </button>

          <span className="ml-auto text-sm opacity-70">
            {ready ? "OCR ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î OCR..."}
          </span>
        </div>

        <div className="grid gap-2">
          <label className="text-sm opacity-70">‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ</label>
          <div className="flex items-center gap-2">
            <div className="flex-1 p-3 rounded-2xl bg-white border border-slate-200 font-mono text-lg">
              {result || "‚Äî"}
            </div>
            {conf != null && (
              <div className="text-sm opacity-70 whitespace-nowrap">
                conf: {conf}
              </div>
            )}
          </div>
        </div>

        <canvas ref={canvasRef} className="hidden" />

        <Tips />

        <Modal
          open={modalOpen}
          onClose={() => setModalOpen(false)}
          message={modalMessage}
          type={modalType}
        />
      </div>
    </div>
  );
}

function RoiOverlay({ getROI }: RoiOverlayProps) {
  const [rect, setRect] = useState<ROIRect | null>(null);

  useEffect(() => {
    const update = () => setRect(getROI());
    update();
    const handler = () => update();
    window.addEventListener("resize", handler);
    const id = setInterval(update, 500);
    return () => {
      window.removeEventListener("resize", handler);
      clearInterval(id);
    };
  }, [getROI]);

  if (!rect) return null;

  return (
    <div className="absolute inset-0 grid place-items-center pointer-events-none">
      <div
        className="rounded-2xl border-4 border-emerald-400/80 shadow-[0_0_0_9999px_rgba(0,0,0,0.35)]"
        style={{
          width: "70%",
          height: "25%",
        }}
      />
    </div>
  );
}

function Tips() {
  return (
    <div className="p-4 rounded-2xl bg-slate-100 border border-slate-200">
      <h2 className="font-semibold mb-2">‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</h2>
      <ul className="list-disc pl-5 space-y-1 text-sm">
        <li>‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£</li>
        <li>‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏•‡∏î‡πÄ‡∏á‡∏≤/‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô</li>
        <li>‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏°‡∏≤‡∏Å</li>
        <li>
          ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏£‡∏≤‡∏™‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô OCR
          ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
        </li>
      </ul>
      <div className="mt-3 text-xs opacity-70">
        ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î/QR ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ BarcodeDetector
        API (‡∏ñ‡πâ‡∏≤‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö) ‡πÅ‡∏ó‡∏ô OCR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
      </div>
    </div>
  );
}

function Modal({
  open,
  onClose,
  message,
  type,
}: {
  open: boolean;
  onClose: () => void;
  message: string;
  type: "success" | "error";
}) {
  if (!open) return null;

  const color =
    type === "success"
      ? "bg-green-100 text-green-800 border-green-300"
      : "bg-red-100 text-red-800 border-red-300";

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black/40 z-50">
      <div
        className={`p-6 rounded-2xl shadow-xl border ${color} max-w-sm w-full`}
      >
        <p className="text-center">{message}</p>
        <button
          onClick={onClose}
          className="mt-4 w-full py-2 rounded-xl bg-slate-900 text-white"
        >
          ‡∏õ‡∏¥‡∏î
        </button>
      </div>
    </div>
  );
}
